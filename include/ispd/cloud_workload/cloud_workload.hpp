
#ifndef ISPD_CLOUD_WORKLOAD_HPP
#define ISPD_CLOUD_WORKLOAD_HPP

#include <ross.h>
#include <memory>
#include <ispd/log/log.hpp>
#include <ispd/model/user.hpp>
#include <ispd/workload/interarrival.hpp>
#include <ispd/message/message.hpp>

#define CHECK_RNG(rng)                                                         \
  DEBUG({                                                                      \
    if (!rng)                                                                  \
      ispd_error("The logical process' reversible-pseudorandom number "        \
                 "generator has not been provided.");                          \
  })

namespace ispd::cloud_workload
{

    /// \class CloudWorkload
    /// \brief A base class representing a workload to be used in the cloud simulation
    ///

    class CloudWorkload{

    protected:
        /// \brief Stores the user who created the workload.
        ///
        /// This member variable holds an integer representing the identifier of the
        /// user-defined workload associated with the current instance of the Workload
        /// class.
        ///
        /// The user identifier who created the workload can provide context and
        /// information about the specific type of workload being simulated, making it
        /// easier to interpret and analyze simulation results or performance metrics.
        ispd::model::User::uid_t m_Owner;

        /// \brief The remaining applications to be generated by this workload.
        ///
        /// The 'm_RemainingApplications' stores the count of applications that are yet to be generated.
        /// It is decremented as applications are generated during the simulation. This information is
        /// important to keep track of the workload progress.
        unsigned m_RemainingApplications;

        /// \brief Unique pointer to InterarrivalDistribution
        ///
        /// This member variable holds a `std::unique_ptr` to an
        /// `InterarrivalDistribution` object associated with the current instance of
        /// the Workload class. The `InterarrivalDistribution` is responsible for
        /// generating time intervals between the arrivals of consecutive events
        /// within the workload.
        ///
        /// Using a `std::unique_ptr` ensures proper memory management and ownership
        /// of the dynamically allocated `InterarrivalDistribution` object. This
        /// allows flexible and efficient handling of different interarrival
        /// distribution types and ensures that the object is properly deallocated
        /// when the Workload is no longer in use.
        std::unique_ptr<InterarrivalDistribution> m_InterarrivalDist;



    public:
        /// \brief Constructor for CloudWorkload class.
        ///
        /// \param owner The user who created the workload
        /// \param remainingApplications  The total number of applications that needs to be generated in this workload.
        /// \param interarrivalDist An unique pointer to InteraarivalDistribution
        [[nodiscard]] explicit CloudWorkload(
                const std::string &owner, const unsigned remainingApplications,
                std::unique_ptr<InterarrivalDistribution> interarrivalDist) noexcept;



        /// \brief Generate the workload, setting the processing and communications
        /// sizes for every task inside an application
        ///
        /// This pure virtual function defines the interface for workload generation
        /// in derived classes, that should implement this function to generate
        /// workload based on the specific generation policy.
        /// \param rng The logical process reversible-pseudonumber random generator.
        /// \param application The application that contains a vector of tasks
        ///                     that will be generated.
        virtual  void generateWorkload(tw_rng_stream *rng, ispd_cloud_message &application) = 0;

        /// \brief Reverse the workload generation, necessary due to the Time Warp's
        ///        rollback mechanism.
        ///
        /// This pure virtual function defines the interface for reversing the
        /// workload generation in derived classes. Time Warp is a distributed
        /// discrete-event simulation technique that allows for virtual time rollback
        /// to correct causality errors. To support rollback, this function enables
        /// the workload generation to be reversed, so the simulation can roll back
        /// the workload's state if necessary.
        ///
        /// \param rng The logical process reversible-pseudorandom number generator.
        virtual void reverseGenerateWorkload(tw_rng_stream *rng) = 0;

        /// \brief Generates the time until the next event's arrival using the
        /// interarrival distribution.
        ///
        /// This function generates the time until the next event's arrival based on
        /// the specified interarrival distribution. The generated time offset is
        /// stored in the provided 'offset' parameter. The interarrival distribution
        /// is determined by the type of interarrival distribution object associated
        /// with the current instance of the Workload class.
        ///
        /// \param rng A pointer to the logical process reversible-pseudorandom number
        /// generator. \param offset A reference to a variable where the generated
        /// time offset will be stored.
        inline void generateInterarrival(tw_rng_stream *const rng, double &offset) {
            m_InterarrivalDist->generateInterarrival(rng, offset);
        }

        /// \brief Reverses the generation of the last interarrival time, necessary
        /// due to the
        ///        Time Warp's rollback mechanism.
        ///
        /// This function is used to reverse the generation of the last interarrival
        /// time when performing backtracking during the simulation. It relies on the
        /// reverse generation mechanism provided by the associated interarrival
        /// distribution object.
        ///
        /// \param rng A pointer to the logical process reversible-pseudorandom number
        /// generator.
        inline void reverseGenerateInterarrival(tw_rng_stream *const rng) {
            m_InterarrivalDist->reverseGenerateInterarrival(rng);
        }


        /// \brief Get the remaining applications to be generated by this workload.
        ///
        /// \returns The number of applications that are yet to be generated by the workload.
        ///
        /// \note This function provides access to the `m_RemainingApplications` member,
        ///       which stores the count of remaining applications. It is used by simulation
        ///       components to monitor the progress of workload generation and
        ///       determine workload generation termination conditions.
        [[nodiscard]] inline unsigned getRemainingApplications() const noexcept {
            return m_RemainingApplications;
        }


        /// \brief Get the user identifier who create the workload.
        ///
        /// This member function returns the user identifier who created the workload
        /// associated with the current instance of the Workload class.
        ///
        /// \return The user identifier who created the workload.
        [[nodiscard]] inline const ispd::model::User::uid_t
        getOwner() const noexcept {
            return m_Owner;
        }

    };
}

#endif
